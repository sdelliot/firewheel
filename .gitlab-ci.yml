###############################
# FIREWHEEL's Continuous Integration
#
# This GitLab CI file enables testing of FIREWHEEL
# on a variety of operating systems and versions of
# Python.
#
# It makes heavy use of YAML Anchors and extends to save space.
# see: https://docs.gitlab.com/ce/ci/yaml/README.html#anchors
#
###############################


###############################
# Setting up before_script anchors to speed up the execution of
# pipeline jobs which do not require each component.
# See: https://docs.gitlab.com/ee/ci/yaml/#yaml-anchors-for-before_script-and-after_script
#
# This includes:
# * create_venv_docker: Creating a Python 3.10 virtual environment
# * install_firewheel: Install FIREWHEEL and any dependencies.
# * configure_firewheel: Configure FIREWHEEL for use by the job.
# * install_mcs: Clone the base and linux Model Component repositories.
###############################
.create_venv_docker: &create_venv_docker
  - python --version ; pip --version
  - pip install $PIP_ARGS virtualenv
  - virtualenv venv
  - source venv/bin/activate

.install_firewheel_docker: &install_firewheel_docker
  - python -m pip install $PIP_ARGS -U build setuptools pip
  - python -m build
  - python -m pip install -e .[dev]

.install_firewheel: &install_firewheel
  - sudo killall minimega  # Make sure minimega is not running
  - sudo systemctl restart minimega
  - *install_firewheel_docker

.set_config: &set_config
  - firewheel config set -s system.default_output_dir "$(pwd)/logs"
  - firewheel config set -s cluster.compute $(hostname)
  - firewheel config set -s cluster.control $(hostname)
  - firewheel config set -s discovery.hostname 127.0.0.1
  - firewheel config set -s grpc.hostname 127.0.0.1
  - firewheel config set -s minimega.experiment_interface lo
  - firewheel config set -s minimega.install_dir /opt/minimega
  - firewheel config set -s python.venv $(pwd)/venv
  - firewheel config set -s python.bin python3

.configure_firewheel_docker: &configure_firewheel_docker
  - *set_config
  - firewheel config set -s system.default_group root
  - python ./src/firewheel/lib/grpc/firewheel_grpc_server.py &

.configure_firewheel: &configure_firewheel
  - *set_config
  - firewheel init
  - firewheel sync
  - firewheel restart hard

.install_mcs_docker: &install_mcs_docker
  - mkdir model_components
  - pip install $PIP_ARGS firewheel-repo-base firewheel-repo-tutorials firewheel-repo-linux firewheel-repo-layer2 firewheel-repo-ntp firewheel-repo-dns firewheel-repo-vyos
  - pushd model_components
  # Skip LFS files, we'll get them from the bin repo. Once open-source is
  # complete, the env var can be removed and this can be pip installed
  - GIT_LFS_SKIP_SMUDGE=1 git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/firewheel/firewheel_repo_utilities.git
  - firewheel repository install firewheel_repo_utilities
  - popd


.install_mcs: &install_mcs
  - pushd /opt/firewheel/
  - *install_mcs_docker
  - pushd model_components
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${NTP_BIN_REPO_PATH} /tmp/ntp
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${DNS_BIN_REPO_PATH} /tmp/dns
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${VYOS_BIN_REPO_PATH} /tmp/vyos
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${LINUX_BIN_REPO_PATH} /tmp/linux
  - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/${UTILITIES_BIN_REPO_PATH} /tmp/utilities
  - SITE_PACKAGES=$(python3 -c 'import sysconfig; print(sysconfig.get_path("purelib"))')
  - mv /tmp/ntp/ntp/ntp-trusty-server.tar "$SITE_PACKAGES/firewheel_repo_ntp/ntp/vm_resources/"
  - mv /tmp/dns/dns_objects/vm_resources/bind9_xenial_debs.tgz "$SITE_PACKAGES/firewheel_repo_dns/dns_objects/vm_resources/bind9_xenial_debs.tgz"
  - mv /tmp/vyos/vyos-1.1.8/vyos-1.1.8.qc2.xz "$SITE_PACKAGES/firewheel_repo_vyos/vyos-1.1.8/"
  - mv /tmp/linux/linux/vm_resources/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/linux/vm_resources"
  - mv /tmp/linux/ubuntu/ubuntu/vm_resources/debs/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/ubuntu/vm_resources/debs/"
  - mv /tmp/linux/ubuntu/bionic/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/bionic/images/"
  - mv /tmp/linux/ubuntu/jammy/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/jammy/images/"
  - mv /tmp/linux/ubuntu/jammy/vm_resources/debs/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/jammy/vm_resources/debs/"
  - mv /tmp/linux/ubuntu/trusty/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/trusty/images/"
  - mv /tmp/linux/ubuntu/trusty/vm_resources/debs/*.tgz "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/trusty/vm_resources/debs/"
  - mv /tmp/linux/ubuntu/xenial/images/ubuntu* "$SITE_PACKAGES/firewheel_repo_linux/ubuntu/xenial/images/"
  - pushd /tmp/utilities; cp -r --parents * /opt/firewheel/model_components/firewheel_repo_utilities/; popd;
  - popd
  - popd


###############################
# Creating a few defaults and setting up the Pipeline stages.
###############################
default:
  tags:
    - vm

stages:
  - lint
  - test
  - deploy

###############################
# Performance Testings
#
# These anchors create an environment for running a stress-test for FIREWHEEL's
# performance.
#
###############################

performance-ubuntu2204:
  before_script:
    - pushd /opt/firewheel/
    - python3.10 -m venv venv
    - source /opt/firewheel/venv/bin/activate
    - popd
    - *install_firewheel
    - *configure_firewheel
    - *install_mcs
  stage: test
  needs: []
  tags:
    - ubuntu2204
  script:
    - pushd /opt/firewheel
    # Enable FW to cache images
    - firewheel experiment --no-install tests.vm_gen:1 minimega.schedules_ready
    # Create a network with a lot of vertices and edges
    - firewheel experiment --no-install --profile tests.vm_gen:10000 tests.connect_all:10 minimega.schedules_ready
    - python -m pip install $PIP_ARGS snakeviz
    - python -m pip install $PIP_ARGS "pywebcopy==7.0.2" lxml_html_clean
    # There are a few flaws with pywebcopy and we need to patch it first
    - |
        sed -i '575i\
                if not url:\
                    self.logger.debug("Invalid URL, re-encoded the resource as [%s]" % (match.group(0)))\
                    return match.group(0)\
                if ans.response is not None and not ans.response.ok:\
                    self.logger.debug("Invalid Response, re-encoded the resource as [%s]" % (match.group(0)))\
                    return match.group(0)' /opt/firewheel/venv/lib/python3.10/site-packages/pywebcopy/elements.py
    - |
        tr -d '\r' < /opt/firewheel/venv/lib/python3.10/site-packages/pywebcopy/elements.py > /tmp/elements.py && mv /tmp/elements.py /opt/firewheel/venv/lib/python3.10/site-packages/pywebcopy/elements.py
    - snakeviz -p 8888 -s firewheel_profile.prof &
    - sleep 5
    - python -m pywebcopy -p --url=http://127.0.0.1:8888/snakeviz/%2Fopt%2Ffirewheel%2Ffirewheel_profile.prof --location=$HOME/$CI_PROJECT_DIR/profile
    - pkill snakeviz
    - popd
  artifacts:
    paths:
      - profile


###############################
# Create Documentation
###############################
docs:
  image: $DOCKER_REGISTRY/python:3.11
  before_script:
    - *create_venv_docker
    - *install_firewheel_docker
    - *configure_firewheel_docker
    - *install_mcs_docker
  stage: lint
  needs: []
  script:
    - tox -e dependencies,docs
    - mkdir documentation
    - mv docs/build/html documentation/html
  artifacts:
    expire_in: 3 mos
    paths:
      - documentation
    name: "${CI_PROJECT_NAME}_${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^documentation.*$/
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  tags:
    - $CI_DOCKER_RUNNER


pages:
  image: $DOCKER_REGISTRY/python:3.11
  before_script:
    - echo "Starting pages."
  stage: deploy
  tags:
    - $CI_DOCKER_RUNNER
  needs:
    - job: docs
      artifacts: true
  script:
    - mv documentation/html public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:
  image: $DOCKER_REGISTRY/python:3.11
  stage: deploy
  before_script:
    - python --version ; pip --version
    - apt-get update && apt-get install -y git git-lfs
    - git lfs install
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python -m pip install $PIP_ARGS --upgrade wheel setuptools pip build twine
  script:
    - git lfs pull
    - python -m build
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --verbose --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  artifacts:
    paths:
      - dist/*.whl
  needs: []
  tags:
    - $CI_DOCKER_RUNNER
  rules:
    - if: '$CI_PIPELINE_SOURCE == "release"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      allow_failure: true
